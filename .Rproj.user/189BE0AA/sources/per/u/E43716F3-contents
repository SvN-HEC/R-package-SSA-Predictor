k<-5
# Check: forecast horizon h=4:
h_vec[k]
# Forward-shifts of BIP (+publication lag)
shift_vec<-0:5
final_predictor<-NULL
# We compute the final predictor, based on data up to the sample end
# Note: for simplicity we here compute an OLS regression 
for (shift in shift_vec)#shift<-0
{
  # Data matrix: forward-shifted BIP and M-SSA components  
  if (length(sel_vec_pred)>1)
  {
    dat<-cbind(c(x_mat[(shift+lag_vec[1]+1):nrow(x_mat),1],rep(NA,shift+lag_vec[1])),t(mssa_array[sel_vec_pred,,k]))
  } else
  {
    dat<-cbind(c(x_mat[(shift+lag_vec[1]+1):nrow(x_mat),1],rep(NA,shift+lag_vec[1])),(mssa_array[sel_vec_pred,,k]))
  }
  rownames(dat)<-rownames(x_mat)
  dat_reg<-na.exclude(dat)
  # Compute GARCH vola  
  y.garch_11<-garchFit(~garch(1,1),data=dat_reg[,1],include.mean=T,trace=F)
  # sigmat could be retrieved from GARCH-object
  sigmat<-y.garch_11@sigma.t
  # But this is lagged by one period
  # Therefore we recompute the vola based on the estimated GARCH-parameters
  eps<-y.garch_11@residuals
  d<-y.garch_11@fit$matcoef["omega",1]
  alpha<-y.garch_11@fit$matcoef["alpha1",1]
  beta<-y.garch_11@fit$matcoef["beta1",1]
  sigmat_own<-sigmat
  for (i in 2:length(sigmat))#i<-2
    sigmat_own[i]<-sqrt(d+beta*sigmat_own[i-1]^2+alpha*eps[i]^2)
  # This is now correct (not lagging anymore)
  sigmat<-sigmat_own
  # Weights are proportional to 1/sigmat^2      
  weight<-1/sigmat^2
#  weight<-rep(1,length(sigmat))#/sigmat^2
  # OLS regression  
  lm_obj<-lm(dat_reg[,1]~dat_reg[,2:ncol(dat_reg)],weight=weight)
#  lm_obj<-lm(dat[,1]~dat[,2:ncol(dat)])
  optimal_component_weights<-lm_obj$coef
  # Compute predictor for each forward-shift  
  final_predictor<-cbind(final_predictor,optimal_component_weights[1]+dat[,2:ncol(dat)]%*%optimal_component_weights[2:length(optimal_weights)])
}  

# Plot M-SSA components predictors (optimized for h=4) and shifts 0:5
par(mfrow=c(1,1))
# Standardize for easier visual inspection
mplot<-scale(cbind(dat[,1],final_predictor))
colnames(mplot)<-c(paste("BIP forward-shifted by ",shift," quarters (plus publication lag)",sep=""),
                   paste("h=",h_vec[k],", shift=",shift_vec,sep=""))
colo<-c("black",rainbow(ncol(final_predictor)))
main_title<-paste("Final predictors based on M-SSA-components ",paste(sel_vec_pred,collapse=","),": h=",h_vec[k],sep="")
plot(mplot[,1],main=main_title,axes=F,type="l",xlab="",ylab="",col=colo[1],lwd=2,ylim=c(min(na.exclude(mplot)),max(na.exclude(mplot))))
mtext(colnames(mplot)[1],col=colo[1],line=-1)
for (i in 1:ncol(mplot))
{
  lines(mplot[,i],col=colo[i],lwd=1,lty=1)
  mtext(colnames(mplot)[i],col=colo[i],line=-i)
}
abline(h=0)
abline(v=which(rownames(mplot)<=date_to_fit)[length(which(rownames(mplot)<=date_to_fit))],lwd=2,lty=2)
axis(1,at=c(1,4*1:(nrow(mplot)/4)),labels=rownames(mplot)[c(1,4*1:(nrow(mplot)/4))])
axis(2)
box()




> rRMSE_mSSA_direct_mean_without_covid
h=0       h=1       h=2       h=3       h=4       h=5       h=6
Shift=0 0.8642818 0.8642818 0.8642818 0.8642818 0.8642818 0.8642818 0.8642818
Shift=1 0.9161338 0.9161338 0.9161338 0.9161338 0.9161338 0.9161338 0.9161338
Shift=2 0.9894289 0.9894289 0.9894289 0.9894289 0.9894289 0.9894289 0.9894289
Shift=3 0.9672275 0.9672275 0.9672275 0.9672275 0.9672275 0.9672275 0.9672275
Shift=4 1.0326547 1.0326547 1.0326547 1.0326547 1.0326547 1.0326547 1.0326547
Shift=5 1.0090801 1.0090801 1.0090801 1.0090801 1.0090801 1.0090801 1.0090801
