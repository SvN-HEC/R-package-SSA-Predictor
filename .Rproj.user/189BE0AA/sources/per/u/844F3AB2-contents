sel_vec_pred<-"BIP"
recompute_results<-F
shift_vec<-0:5
  # Initialize performance matrices
MSE_oos_mssa_comp_without_covid_mat<-MSE_oos_mssa_comp_mat<-p_mat_mssa<-p_mat_mssa_components<-p_mat_mssa_components_without_covid<-p_mat_direct<-rRMSE_mSSA_comp_direct<-rRMSE_mSSA_comp_mean<-rRMSE_mSSA_comp_direct_without_covid<-rRMSE_mSSA_comp_mean_without_covid<-rRMSE_mSSA_direct_mean_without_covid<-rRMSE_mSSA_direct_mean<-p_mat_direct_without_covid<-matrix(ncol=length(h_vec),nrow=length(h_vec)-1)
  # Use WLS
use_garch<-T
  # Set-up progress bar: indicates progress in R-console
pb <- txtProgressBar(min=min(h_vec),max=max(h_vec)-1,style=3)
  
# The following double loop computes all combinations of forward-shifts (of BIP) and forecast horizons (of M-SSA)
for (shift in shift_vec)#shift<-3
{
    # Progress bar: see R-console
  setTxtProgressBar(pb, shift)
  for (j in h_vec)#j<-6
  {
    # Horizon j corresponds to k=j+1-th entry of array    
    k<-j+1
    if (length(sel_vec_pred)>1)
    {
      mssa_pred<-apply(scale(t(mssa_array[sel_vec_pred,,k])),1,mean)
    } else
    {
      mssa_pred<-scale(mssa_array[sel_vec_pred,,k])
    }
# A. M-SSA component predictor
# Specify data matrix for WLS regression
    dat<-cbind(c(x_mat[(shift+lag_vec[1]+1):nrow(x_mat),1],rep(NA,shift+lag_vec[1])),mssa_pred)

    rownames(dat)<-rownames(x_mat)
    colnames(dat)<-c(colnames(x_mat)[1],"M-SSA predictor")
    dat<-na.exclude(dat)
# Apply the previous function: compute GARCH, WLS regression, out-of-sample MSEs and p-values    
    perf_obj<-optimal_weight_predictor_func(dat,in_out_separator,use_garch,shift,lag_vec)
    # Retrieve out-of-sample performances 
    # a. p-values with/without Pandemic    
    p_mat_mssa_components[shift+1,k]<-perf_obj$p_value
    p_mat_mssa_components_without_covid[shift+1,k]<-perf_obj$p_value_without_covid
      # b. MSE forecast error out-of-sample
      #   -M-SSA components with/without Pandemic    
    MSE_oos_mssa_comp_mat[shift+1,k]<-MSE_oos_mssa_comp<-perf_obj$MSE_oos
    MSE_oos_mssa_comp_without_covid_mat[shift+1,k]<-MSE_oos_mssa_comp_without_covid<-perf_obj$MSE_oos_without_covid
      #   -mean-benchmark with/without Pandemic    
    MSE_mean_oos<-perf_obj$MSE_mean_oos
    MSE_mean_oos_without_covid<-perf_obj$MSE_mean_oos_without_covid
      # Here we retrieve the final in-sample predictor (based on the full-sample WLS regression) as well as the 
      #    real-time out-of-sample predictor (re-adjusted to new data at each time point)
      # We can plot both predictors to illustrate revisions (due to WLS estimation at each time point), see below
      # Note: the variables will be overwritten, i.e., we keep only the last run through the double loop, 
      #   corresponding to maximal shift and maximal forecast horizon, see exercise 2.1 below 
    final_components_preditor<-perf_obj$final_in_sample_preditor
    oos_components_preditor<-perf_obj$cal_oos_pred
      # We can also obtain the regression weights to track changes (systematic vs. noisy revisions) over time
      # Note: the variable will be overwritten, i.e., we keep only the last run through the double loop, 
      #   corresponding to maximal shift and maximal forecast horizon, see exercise 2.2 below 
    track_weights<-perf_obj$track_weights
      
      # B. Direct forecasts
      # -The main difference to M-SSA above is the specification of the explanatory variables in the data 
      #     matrix dat: we here use x_mat instead of mssa_array. 
      #   -We select all indicators (one could easily change this setting but results are only marginally effected as long as ifo and ESi are included)
      #   -Note that the data matrix here does not depend on j, in contrast  to the M-SSA components above    
    dat<-cbind(c(x_mat[(shift+lag_vec[1]+1):nrow(x_mat),1],rep(NA,shift+lag_vec[1])),x_mat)
    rownames(dat)<-rownames(x_mat)
    dat<-na.exclude(dat)
      
    perf_obj<-optimal_weight_predictor_func(dat,in_out_separator,use_garch,shift,lag_vec)
      # Retrieve out-of-sample performances: p-values and forecast MSE, with/without Pandemic 
    p_mat_direct[shift+1,k]<-perf_obj$p_value 
    p_mat_direct_without_covid[shift+1,k]<-perf_obj$p_value_without_covid 
    MSE_oos_direct<-perf_obj$MSE_oos
    MSE_oos_direct_without_covid<-perf_obj$MSE_oos_without_covid
      
      # Compute rRMSEs
      # a. M-SSA Components vs. direct forecast    
    rRMSE_mSSA_comp_direct[shift+1,k]<-sqrt(MSE_oos_mssa_comp/MSE_oos_direct)
      # b. M-SSA Components vs. mean benchmark    
    rRMSE_mSSA_comp_mean[shift+1,k]<-sqrt(MSE_oos_mssa_comp/MSE_mean_oos)
      # c. Direct forecast vs. mean benchmark    
    rRMSE_mSSA_direct_mean[shift+1,k]<-sqrt(MSE_oos_direct/MSE_mean_oos)
      # Same as a, b, c but without Pandemic
    rRMSE_mSSA_comp_direct_without_covid[shift+1,k]<-sqrt(MSE_oos_mssa_comp_without_covid/MSE_oos_direct_without_covid)
    rRMSE_mSSA_comp_mean_without_covid[shift+1,k]<-sqrt(MSE_oos_mssa_comp_without_covid/MSE_mean_oos_without_covid)
    rRMSE_mSSA_direct_mean_without_covid[shift+1,k]<-sqrt(MSE_oos_direct_without_covid/MSE_mean_oos_without_covid)
  }
}
  # Close progress bar
close(pb)
  # Note: possible warnings issued by the GARCH estimation routine during computations can be ignored
  
  # Assign column and rownames
colnames(p_mat_mssa_components)<-colnames(p_mat_direct)<-colnames(p_mat_mssa_components_without_covid)<-
colnames(rRMSE_mSSA_comp_direct)<-colnames(rRMSE_mSSA_comp_mean)<-
colnames(rRMSE_mSSA_comp_direct_without_covid)<-colnames(rRMSE_mSSA_comp_mean_without_covid)<-
colnames(rRMSE_mSSA_direct_mean)<-colnames(rRMSE_mSSA_direct_mean_without_covid)<-
colnames(p_mat_direct_without_covid)<-colnames(MSE_oos_mssa_comp_mat)<-
colnames(MSE_oos_mssa_comp_without_covid_mat)<-paste("h=",h_vec,sep="")
rownames(p_mat_mssa_components)<-rownames(p_mat_direct)<-rownames(p_mat_mssa_components_without_covid)<-
rownames(rRMSE_mSSA_comp_direct)<-rownames(rRMSE_mSSA_comp_mean)<-
rownames(rRMSE_mSSA_comp_direct_without_covid)<-rownames(rRMSE_mSSA_comp_mean_without_covid)<-
rownames(rRMSE_mSSA_direct_mean)<-rownames(rRMSE_mSSA_direct_mean_without_covid)<-
rownames(p_mat_direct_without_covid)<-rownames(MSE_oos_mssa_comp_mat)<-
rownames(MSE_oos_mssa_comp_without_covid_mat)<-paste("Shift=",shift_vec,sep="")
  # Define list for saving all matrices  
list_perf<-list(p_mat_mssa_components=p_mat_mssa_components,p_mat_direct=p_mat_direct,
                  p_mat_mssa_components_without_covid=p_mat_mssa_components_without_covid,rRMSE_mSSA_comp_direct=rRMSE_mSSA_comp_direct,
                  rRMSE_mSSA_comp_mean=rRMSE_mSSA_comp_mean, rRMSE_mSSA_comp_direct_without_covid=rRMSE_mSSA_comp_direct_without_covid,
                  rRMSE_mSSA_comp_mean_without_covid=rRMSE_mSSA_comp_mean_without_covid,rRMSE_mSSA_direct_mean=rRMSE_mSSA_direct_mean,
                  rRMSE_mSSA_direct_mean_without_covid=rRMSE_mSSA_direct_mean_without_covid,p_mat_direct_without_covid=p_mat_direct_without_covid,
                  final_components_preditor=final_components_preditor,oos_components_preditor=oos_components_preditor,
                  track_weights=track_weights,MSE_oos_mssa_comp_mat=MSE_oos_mssa_comp_mat,
                  MSE_oos_mssa_comp_without_covid_mat=MSE_oos_mssa_comp_without_covid_mat)
  # The results can be saved (overwritten)    
  if (F)
  {
    save(list_perf,file=paste(getwd(),"/Results/list_perf",sep=""))
  }
  